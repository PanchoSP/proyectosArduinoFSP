// **************************************************Última prueba existosa: 14/04 *****************************************************
// **************************************************Última prueba existosa: 21/04 *****************************************************


#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2841dcc6-6956-48a9-b3c9-725dbe672dc0 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float distancia;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
int TRIG = 22; //D22
int ECO = 23;  //D23
//int LED = 4; // GPIO 2 o D4
int DURACION;
int DISTANCIA;
int timeOpen = 0;
int LED_State = HIGH; // Variable que determina el estado del LED según la distancia
unsigned long tiempoInicio = 0; // Variable que almacena el tiempo inicial
unsigned long tiempoDeConteo = 0; // Variable que almacena el tiempo transcurrido
unsigned long tiempoLimite = 43200000; // Equivale a 12 horas = 12*60*60*1000 milisegundos


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);   

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(TRIG, OUTPUT);  // Envía el pulso que rebota en el objeto - Pin 22
  pinMode(ECO, INPUT);    // Recibe de vuelta el pulso que rebota en el objeto - Pin 23
  
  // Para el LED
  // pinMode(LED, OUTPUT); // Queda configurado el pin LED como de pin de salida
  tiempoInicio = millis(); // Guarda el tiempo de inicio
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  digitalWrite(TRIG, HIGH);     // Emite un pulso
  delay(1);                     // Cada un milisegundo
  digitalWrite(TRIG, LOW);      // 
  DURACION = pulseIn(ECO, HIGH);  // Almacena en DURACION el tiempo de espera por un pulso alto
  DISTANCIA = DURACION / 58.2;    // Convierte el tiempo en DISTANCIA medida en cm
  Serial.println(DISTANCIA);      // Muestra DISTANCIA por pantalla Serial
  delay(1000);                     // Tiempo entre dato y dato de 200 milisegundos
  distancia = DISTANCIA;          // Se asigna a "distancia" la variable que está en la nube y que se puede ver en la ventana thingProperties.h

  // Prender y apagar el LED: Se enciende si la distancia es mayor a 25cm
  if (DISTANCIA < 25){ // Puerta Cerrada
    //LED_State = LOW; // Apaga el LED si la distancia es menor a 25cm
    isOpened = false;
  } else{ // Puerta Abierta
    //LED_State = HIGH; // Enciende el LED si la distancia es mayor a 25cm
    timeOpen = timeOpen + 1;
    isOpened = true;
  }
  tiempoOpened = timeOpen;        // Se asigna a "tiempoOpened" la variable que está en la nube y que se puede ver en la ventana thingProperties.h
  //digitalWrite(LED, LED_State);   // Configura el led según la distancia

  // Cálculo del tiempo transcurrido
  tiempoDeConteo = (millis() - tiempoInicio)/1000; 

  // Verificar si han pasado 12 horas
  if (tiempoDeConteo >= tiempoLimite){    
    timeOpen = 0;   // Reiniciar el contador de timeOpen
    tiempoInicio = millis(); // Reiniciar el tiempoInicio

  }
  
}


